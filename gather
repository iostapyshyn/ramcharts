#!/usr/bin/env drgn

import drgn
from drgn import FaultError, NULL, Object, cast, container_of, execscript, offsetof, reinterpret, sizeof, stack_trace
from drgn.helpers.common import *
from drgn.helpers.linux import *

import argparse
import numpy as np

from tqdm import tqdm

from common import *

import sys

def interpret_page(page):
    ret = int(Page.FREE)

    if PageCompound(page) and PageTail(page):
        page = compound_head(page)

    if page._refcount.counter > 0:
        ret = int(Page.OTHER)

        if PageReserved(page):
            ret = int(Page.RESERVED)

        mapping_addr = page.mapping[0].address_
        if mapping_addr != 0:
            if mapping_addr & 1:
                ret = int(Page.ANON)
            else:
                ret = int(Page.FILE)

    return ret



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("outfile")
    args = parser.parse_args()

    f = open(args.outfile, "wb")

    total = int(prog["max_pfn"] - prog["min_low_pfn"])

    data = np.zeros(total, dtype=np.uint8)
    mapcounts = np.zeros(total, dtype=np.int32)

    try:
        for (i, page) in tqdm(enumerate(for_each_page(prog)), total=total):
            try:
                data[i] = interpret_page(page)
                mapcounts[i] = page._mapcount.counter
            except FaultError:
                pass

    except KeyboardInterrupt:
        pass

    np.savez_compressed(f, pages=data, mapcounts=mapcounts)

# Local Variables:
# mode: python
# End:
