#!/usr/bin/env drgn

import drgn
from drgn import FaultError, NULL, Object, cast, container_of, execscript, offsetof, reinterpret, sizeof, stack_trace
from drgn.helpers.common import *
from drgn.helpers.linux import *

import argparse
import numpy as np

from tqdm import tqdm

from common import *

import sys

def interpret_page(page):
    ret = int(Page.FREE)

    try:
        if PageCompound(page) and PageTail(page):
            page = compound_head(page)

        if page._refcount.counter > 0:
            ret = int(Page.OTHER)

            if PageReserved(page):
                ret = int(Page.RESERVED)

            mapping_addr = page.mapping[0].address_
            if mapping_addr != 0:
                if mapping_addr & 1:
                    ret = int(Page.ANON)
                else:
                    ret = int(Page.FILE)
    except FaultError:
        pass

    return ret



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("outfile")
    args = parser.parse_args()

    f = open(args.outfile, "wb")

    total = int(prog["max_pfn"] - prog["min_low_pfn"])

    data = np.zeros(total, dtype=np.uint8)

    try:
        for (i, page) in tqdm(enumerate(for_each_page(prog)), total=total):
            data[i] = interpret_page(page)

    except KeyboardInterrupt:
        pass

    np.savez_compressed(f, pages=data)

# Local Variables:
# mode: python
# End:
